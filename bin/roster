#!/usr/bin/env node

var roster  = require('../index.js');

var argv  = require('minimist')(process.argv.slice(2));
var pkg   = require('../package.json');
var debug = require('debug')(pkg.name);

var command = argv['_'] && argv['_'][0];
var name = argv['_'] && argv['_'][1];

if (!command || !name || argv.h || argv.help) return usage();

function usage() {
  console.error('%s %s', pkg.name, pkg.version);
  console.error('')
  console.error('Usage: roster [command] [user] [opts]');
  console.error('')
  console.error('Commands:');
  console.error('')
  console.error(' roster exists [user] [opts]')
  console.error('')
  console.error(' roster groups [user] [opts]')
  console.error('')
  console.error(' roster create [user] [opts]')
  console.error('   --home|-h       Create the home directory')
  console.error('   --home_dir|-d   Specify the home directory path')
  console.error('   --full_name|-f  Set the user full name')
  console.error('   --user_id|-i    Set the user ID')
  console.error('   --group_id|-g   Set the group ID')
  console.error('   --shell|-s      Set the user shell')
  console.error('   --groups        List of additionals comma separated groups to subscribe')
  console.error('   --system        Linux only, create a system account (-r)')
  console.error('   --hidden        Macos only, create an hidden account')
  console.error('   --guest         Macos only, create a guest account')
  console.error('')
  console.error(' roster delete [user] [opts]')
  console.error('   --remove|-r     Delete the home directory')
  console.error('')
  console.error('Options:');
  console.error('')
  console.error('   --json          Print results as JSON')
  console.error('')

  process.exit(1);
}

debug('argv %j', argv)

switch (command) {
  case 'exists':
    return roster.exists(name, function(err, bool) {
      if (err) {
        console.error(argv.json ? JSON.stringify(err) : err);
        process.exitCode = 1;
      } else if (argv.json) console.log(JSON.stringify(bool))
      else console.log('Exists: %s', bool);
    });
    break;

  case 'groups':
    return roster.get_groups(name, function(err, list) {
      if (err) {
        console.error(argv.json ? JSON.stringify(err) : err);
        process.exitCode = 1;
      } else console.log(argv.json ? JSON.stringify(list) : list);
    })

  case 'create':
    argv.user = name;
    return roster.create(argv, done);
    break;

  case 'remove':
  case 'delete':
    return roster.delete(name, argv, done);
    break;

  default:
    usage();
}

function done(err, res) {
  if (err) {
    console.error(argv.json ? JSON.stringify(err) : err);
    process.exitCode = 1;
  } else console.log(argv.json ? JSON.stringify(true) : 'Success!');
}
